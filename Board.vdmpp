class Board

types
	
	public TypeOfPiece = <White> | <Black> | <BlankSpace>;
		
instance variables
	
	private board : map seq of nat1 to TypeOfPiece := {|->};

operations

	public Board : () ==> Board
  Board() ==
  (
  	board := {
  	  [1,1] |-> <White>, [1,2] |-> <White>, [1,3] |-> <White>, [1,4] |-> <White>, [1,5] |-> <White>, [1,6] |-> <White>, [1,7] |-> <White>, [1,8] |-> <Black>,
  	  [2,1] |-> <White>, [2,2] |-> <BlankSpace>, [2,3] |-> <BlankSpace>, [2,3] |-> <BlankSpace>, [2,4] |-> <BlankSpace>, [2,5] |-> <BlankSpace>, [2,6] |-> <BlankSpace>, [2,7] |-> <BlankSpace>, [2,8] |-> <Black>,
  	 	[3,1] |-> <White>, [3,2] |-> <BlankSpace>, [3,3] |-> <BlankSpace>, [3,3] |-> <BlankSpace>, [3,4] |-> <BlankSpace>, [3,5] |-> <BlankSpace>, [3,6] |-> <BlankSpace>, [3,7] |-> <BlankSpace>, [3,8] |-> <Black>,
  	  [4,1] |-> <White>, [4,2] |-> <BlankSpace>, [4,3] |-> <BlankSpace>, [4,3] |-> <BlankSpace>, [4,4] |-> <BlankSpace>, [4,5] |-> <BlankSpace>, [4,6] |-> <BlankSpace>, [4,7] |-> <BlankSpace>, [4,8] |-> <Black>,
  	  [5,1] |-> <White>, [5,2] |-> <BlankSpace>, [5,3] |-> <BlankSpace>, [5,3] |-> <BlankSpace>, [5,4] |-> <BlankSpace>, [5,5] |-> <BlankSpace>, [5,6] |-> <BlankSpace>, [5,7] |-> <BlankSpace>, [5,8] |-> <Black>,
  	  [6,1] |-> <White>, [6,2] |-> <BlankSpace>, [6,3] |-> <BlankSpace>, [6,3] |-> <BlankSpace>, [6,4] |-> <BlankSpace>, [6,5] |-> <BlankSpace>, [6,6] |-> <BlankSpace>, [6,7] |-> <BlankSpace>, [6,8] |-> <Black>,
  	  [7,1] |-> <White>, [7,2] |-> <BlankSpace>, [7,3] |-> <BlankSpace>, [7,3] |-> <BlankSpace>, [7,4] |-> <BlankSpace>, [7,5] |-> <BlankSpace>, [7,6] |-> <BlankSpace>, [7,7] |-> <BlankSpace>, [7,8] |-> <Black>,
  	  [8,1] |-> <White>, [8,2] |-> <Black>, [8,3] |-> <Black>, [8,3] |-> <Black>, [8,4] |-> <Black>, [8,5] |-> <Black>, [8,6] |-> <Black>, [8,7] |-> <Black>, [8,8] |-> <Black>
  	};
  );

  public reset : () ==> ()
  reset() ==
  (
    board := {
 			[1,1] |-> <White>, [1,2] |-> <White>, [1,3] |-> <White>, [1,4] |-> <White>, [1,5] |-> <White>, [1,6] |-> <White>, [1,7] |-> <White>, [1,8] |-> <Black>,
  	  [2,1] |-> <White>, [2,2] |-> <BlankSpace>, [2,3] |-> <BlankSpace>, [2,3] |-> <BlankSpace>, [2,4] |-> <BlankSpace>, [2,5] |-> <BlankSpace>, [2,6] |-> <BlankSpace>, [2,7] |-> <BlankSpace>, [2,8] |-> <Black>,
  	 	[3,1] |-> <White>, [3,2] |-> <BlankSpace>, [3,3] |-> <BlankSpace>, [3,3] |-> <BlankSpace>, [3,4] |-> <BlankSpace>, [3,5] |-> <BlankSpace>, [3,6] |-> <BlankSpace>, [3,7] |-> <BlankSpace>, [3,8] |-> <Black>,
  	  [4,1] |-> <White>, [4,2] |-> <BlankSpace>, [4,3] |-> <BlankSpace>, [4,3] |-> <BlankSpace>, [4,4] |-> <BlankSpace>, [4,5] |-> <BlankSpace>, [4,6] |-> <BlankSpace>, [4,7] |-> <BlankSpace>, [4,8] |-> <Black>,
  	  [5,1] |-> <White>, [5,2] |-> <BlankSpace>, [5,3] |-> <BlankSpace>, [5,3] |-> <BlankSpace>, [5,4] |-> <BlankSpace>, [5,5] |-> <BlankSpace>, [5,6] |-> <BlankSpace>, [5,7] |-> <BlankSpace>, [5,8] |-> <Black>,
  	  [6,1] |-> <White>, [6,2] |-> <BlankSpace>, [6,3] |-> <BlankSpace>, [6,3] |-> <BlankSpace>, [6,4] |-> <BlankSpace>, [6,5] |-> <BlankSpace>, [6,6] |-> <BlankSpace>, [6,7] |-> <BlankSpace>, [6,8] |-> <Black>,
  	  [7,1] |-> <White>, [7,2] |-> <BlankSpace>, [7,3] |-> <BlankSpace>, [7,3] |-> <BlankSpace>, [7,4] |-> <BlankSpace>, [7,5] |-> <BlankSpace>, [7,6] |-> <BlankSpace>, [7,7] |-> <BlankSpace>, [7,8] |-> <Black>,
  	  [8,1] |-> <White>, [8,2] |-> <Black>, [8,3] |-> <Black>, [8,3] |-> <Black>, [8,4] |-> <Black>, [8,5] |-> <Black>, [8,6] |-> <Black>, [8,7] |-> <Black>, [8,8] |-> <Black>
  	};
  );


	pure public getPiece : seq of nat1 ==> TypeOfPiece
	getPiece(coordsXY) ==
	(
		return board(coordsXY);
	)	
	pre validCoords(coordsXY) and board <> {|->};
	
	
	pure public validCoords : seq of nat1 ==> bool
	validCoords(coordsXY) ==
	(
		return coordsXY in set dom board;
	)
	pre len coordsXY = 2;
	
	
	pure public validColour : seq of nat1 * TypeOfPiece ==> bool
	validColour(coords, colour) ==
	(
		if board(coords) = colour
		then return true
		else return false;
	);	


	pure public canItMove : TypeOfPiece * seq of nat1 * seq of nat1 ==> bool
	canItMove(currentP, pi, pf) ==
	(
		if board(pi) = currentP and board(pf) = <BlankSpace>
		then return true;
		return false;
	)
	pre pieceInTheMiddleH(pi,pf) and pieceInTheMiddleV(pi,pf);
	
	
	public movePiece : seq of nat1 * seq of nat1 * TypeOfPiece ==> bool
	movePiece(coord, pfC, color) ==
	(
		board(coord) := <BlankSpace>;
		board(pfC) := color;
		return true;
	)pre validCoords(coord) and validCoords(pfC) and validColour(coord, color) and canItMove(color,coord,pfC);
	
	
	pure public pieceInTheMiddleH : seq of nat1 * seq of nat1 ==> bool
	pieceInTheMiddleH(pi, pf) ==
	(
		dcl id : nat;
		if pi(1) > pf(1)
		then id := pi(1) - pf(1)
		else id := pf(1) - pi(1);
		
		
		if pi(2) = pf(2)
		then return true;
		
		if pi(1) = pf(1)
		then
		(
			while (id <> 0)
			do
			(	
				if(getPiece([pi(1),pi(2)+id]) <> <BlankSpace>)
				then return false;
				
				id := id-1;
			);
			return true;
		) 
		else return false;
	) pre validCoords(pi) and validCoords(pf);
	
	
	pure public pieceInTheMiddleV : seq of nat1 * seq of nat1 ==> bool
	pieceInTheMiddleV(pi, pf) ==
	(
		dcl id : nat;
		if pi(2) > pf(2)
		then id := pi(2) - pf(2)
		else id := pf(2) - pi(2);
	
		if pi(1) = pf(1) 
		then return true;
		
		if pi(2) = pf(2)
		then
		(
			while (id <> 0)
			do
			(	
				if(getPiece([pi(1)+id,pi(2)]) <> <BlankSpace>)
				then return false;
				
				id := id-1;
			);
			return true;
		) 
		else return false;
	) pre validCoords(pi) and validCoords(pf);
	
	
	
	public fillFromTo : seq of nat1 * seq of nat1 * TypeOfPiece ==> ()
	fillFromTo(orig, dest, color) ==
	(
		dcl org : seq of nat1 := orig;
		dcl dst : seq of nat1 := dest;
		if org(1) = dst(1)
		then
		(
			if org(2) > dst(2)
			then
			(
				org(2) := org(2) - 1;
				while(org(2) <> dst(2))
				do(board(org) := color;
					org(2) := org(2) - 1);
			)
			else
			(
				org(2) := org(2) + 1;
				while(org(2) <> dst(2))
				do(board(org) := color;
					org(2) := org(2) + 1);
			)
		)
		else
		(
			if org(1) > dst(1)
			then
			(
				org(1) := org(1) - 1;
				while(org(1) <> dst(1))
				do(board(org) := color;
					org(1) := org(1) - 1);
			)
			else
			(
				org(1) := org(1) + 1;
				while(org(1) <> dst(1))
				do(board(org) := color;
					org(1) := org(1) + 1);
			)			
		)	
	);

functions
-- TODO Define functiones here

end Board