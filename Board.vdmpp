class Board

types
	
	public TypeOfPieces = <White> | <Black> | <BlankSpace>;
	
	public Position :: x : nat
					y : nat
		inv p == p.x >= 0 and p.x < 8 and p.y >= 0 and p.y < 8;
		

instance variables
	
	private board : map seq of nat1 to TypeOfPieces := {|->};

operations

	public Board : () ==> Board
  Board() ==
  (
  	board := {
  	  [1,1] |-> <White>, [1,4] |-> <White>, [1,7] |-> <Black>,
  	  [2,2] |-> <White>, [2,4] |-> <BlankSpace>, [2,6] |-> <Black>,
  	  [3,3] |-> <White>, [3,4] |-> <BlankSpace>, [3,5] |-> <Black>,
  	  [4,1] |-> <White>, [4,2] |-> <BlankSpace>, [4,3] |-> <Black>,
  	  [4,5] |-> <White>, [4,6] |-> <BlankSpace>, [4,7] |-> <Black>,
  	  [5,3] |-> <White>, [5,4] |-> <BlankSpace>, [5,5] |-> <Black>,
  	  [6,2] |-> <White>, [6,4] |-> <BlankSpace>, [6,6] |-> <Black>,
  	  [7,1] |-> <White>, [7,4] |-> <Black>, [7,7] |-> <Black>
  	};
  );

  public reset : () ==> ()
  reset() ==
  (
    board := {
  	 [1,1] |-> <White>, [1,4] |-> <White>, [1,7] |-> <Black>,
  	  [2,2] |-> <White>, [2,4] |-> <BlankSpace>, [2,6] |-> <Black>,
  	  [3,3] |-> <White>, [3,4] |-> <BlankSpace>, [3,5] |-> <Black>,
  	  [4,1] |-> <White>, [4,2] |-> <BlankSpace>, [4,3] |-> <Black>,
  	  [4,5] |-> <White>, [4,6] |-> <BlankSpace>, [4,7] |-> <Black>,
  	  [5,3] |-> <White>, [5,4] |-> <BlankSpace>, [5,5] |-> <Black>,
  	  [6,2] |-> <White>, [6,4] |-> <BlankSpace>, [6,6] |-> <Black>,
  	  [7,1] |-> <White>, [7,4] |-> <Black>, [7,7] |-> <Black>
  	};
  );

	public getPiece : seq of nat1 ==> TypeOfPieces
	getPiece(coordsXY) ==
	(
		return board(coordsXY);
	)	
	pre validCoords(coordsXY) and board <> {|->};
	
	public getBoard : () ==> map seq of nat1 to TypeOfPieces
	getBoard() ==
	(
		return board; 
	);
	
	pure public validCoords : seq of nat1 ==> bool
	validCoords(coordsXY) ==
	(
		return coordsXY in set dom board;
	)
	pre len coordsXY = 2;
	
	--public move : TypeOfPiece * seq of nat1 * seq of nat1 ==> bool
	
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Board