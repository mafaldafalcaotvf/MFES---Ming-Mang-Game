class Board

types
	
	public TypeOfPiece = <White> | <Black> | <BlankSpace>;
		
instance variables
	
	private board : map seq of nat1 to TypeOfPiece := {|->};

operations

	public Board : () ==> Board
  Board() ==
  (
  	board := {
  	  [1,1] |-> <White>, [1,2] |-> <White>, [1,3] |-> <White>, [1,4] |-> <White>, [1,5] |-> <White>, [1,6] |-> <White>, [1,7] |-> <White>, [1,8] |-> <Black>,
  	  [2,1] |-> <White>, [2,2] |-> <BlankSpace>, [2,3] |-> <BlankSpace>, [2,3] |-> <BlankSpace>, [2,4] |-> <BlankSpace>, [2,5] |-> <BlankSpace>, [2,6] |-> <BlankSpace>, [2,7] |-> <BlankSpace>, [2,8] |-> <Black>,
  	 	[3,1] |-> <White>, [3,2] |-> <BlankSpace>, [3,3] |-> <BlankSpace>, [3,3] |-> <BlankSpace>, [3,4] |-> <BlankSpace>, [3,5] |-> <BlankSpace>, [3,6] |-> <BlankSpace>, [3,7] |-> <BlankSpace>, [3,8] |-> <Black>,
  	  [4,1] |-> <White>, [4,2] |-> <BlankSpace>, [4,3] |-> <BlankSpace>, [4,3] |-> <BlankSpace>, [4,4] |-> <BlankSpace>, [4,5] |-> <BlankSpace>, [4,6] |-> <BlankSpace>, [4,7] |-> <BlankSpace>, [4,8] |-> <Black>,
  	  [5,1] |-> <White>, [5,2] |-> <BlankSpace>, [5,3] |-> <BlankSpace>, [5,3] |-> <BlankSpace>, [5,4] |-> <BlankSpace>, [5,5] |-> <BlankSpace>, [5,6] |-> <BlankSpace>, [5,7] |-> <BlankSpace>, [5,8] |-> <Black>,
  	  [6,1] |-> <White>, [6,2] |-> <BlankSpace>, [6,3] |-> <BlankSpace>, [6,3] |-> <BlankSpace>, [6,4] |-> <BlankSpace>, [6,5] |-> <BlankSpace>, [6,6] |-> <BlankSpace>, [6,7] |-> <BlankSpace>, [6,8] |-> <Black>,
  	  [7,1] |-> <White>, [7,2] |-> <BlankSpace>, [7,3] |-> <BlankSpace>, [7,3] |-> <BlankSpace>, [7,4] |-> <BlankSpace>, [7,5] |-> <BlankSpace>, [7,6] |-> <BlankSpace>, [7,7] |-> <BlankSpace>, [7,8] |-> <Black>,
  	  [8,1] |-> <White>, [8,2] |-> <Black>, [8,3] |-> <Black>, [8,3] |-> <Black>, [8,4] |-> <Black>, [8,5] |-> <Black>, [8,6] |-> <Black>, [8,7] |-> <Black>, [8,8] |-> <Black>
  	};
  );

  public reset : () ==> ()
  reset() ==
  (
    board := {
 			[1,1] |-> <White>, [1,2] |-> <White>, [1,3] |-> <White>, [1,4] |-> <White>, [1,5] |-> <White>, [1,6] |-> <White>, [1,7] |-> <White>, [1,8] |-> <Black>,
  	  [2,1] |-> <White>, [2,2] |-> <BlankSpace>, [2,3] |-> <BlankSpace>, [2,3] |-> <BlankSpace>, [2,4] |-> <BlankSpace>, [2,5] |-> <BlankSpace>, [2,6] |-> <BlankSpace>, [2,7] |-> <BlankSpace>, [2,8] |-> <Black>,
  	 	[3,1] |-> <White>, [3,2] |-> <BlankSpace>, [3,3] |-> <BlankSpace>, [3,3] |-> <BlankSpace>, [3,4] |-> <BlankSpace>, [3,5] |-> <BlankSpace>, [3,6] |-> <BlankSpace>, [3,7] |-> <BlankSpace>, [3,8] |-> <Black>,
  	  [4,1] |-> <White>, [4,2] |-> <BlankSpace>, [4,3] |-> <BlankSpace>, [4,3] |-> <BlankSpace>, [4,4] |-> <BlankSpace>, [4,5] |-> <BlankSpace>, [4,6] |-> <BlankSpace>, [4,7] |-> <BlankSpace>, [4,8] |-> <Black>,
  	  [5,1] |-> <White>, [5,2] |-> <BlankSpace>, [5,3] |-> <BlankSpace>, [5,3] |-> <BlankSpace>, [5,4] |-> <BlankSpace>, [5,5] |-> <BlankSpace>, [5,6] |-> <BlankSpace>, [5,7] |-> <BlankSpace>, [5,8] |-> <Black>,
  	  [6,1] |-> <White>, [6,2] |-> <BlankSpace>, [6,3] |-> <BlankSpace>, [6,3] |-> <BlankSpace>, [6,4] |-> <BlankSpace>, [6,5] |-> <BlankSpace>, [6,6] |-> <BlankSpace>, [6,7] |-> <BlankSpace>, [6,8] |-> <Black>,
  	  [7,1] |-> <White>, [7,2] |-> <BlankSpace>, [7,3] |-> <BlankSpace>, [7,3] |-> <BlankSpace>, [7,4] |-> <BlankSpace>, [7,5] |-> <BlankSpace>, [7,6] |-> <BlankSpace>, [7,7] |-> <BlankSpace>, [7,8] |-> <Black>,
  	  [8,1] |-> <White>, [8,2] |-> <Black>, [8,3] |-> <Black>, [8,3] |-> <Black>, [8,4] |-> <Black>, [8,5] |-> <Black>, [8,6] |-> <Black>, [8,7] |-> <Black>, [8,8] |-> <Black>
  	};
  );

	public getPiece : seq of nat1 ==> TypeOfPiece
	getPiece(coordsXY) ==
	(
		return board(coordsXY);
	)	
	pre validCoords(coordsXY) and board <> {|->};
	
	public getBoard : () ==> map seq of nat1 to TypeOfPiece
	getBoard() ==
	(
		return board; 
	);
	
	pure public validCoords : seq of nat1 ==> bool
	validCoords(coordsXY) ==
	(
		return coordsXY in set dom board;
	)
	pre len coordsXY = 2;
	
	pure public validColour : seq of nat1 * TypeOfPiece ==> bool
	validColour(coords, colour) ==
	(
		if board(coords) = colour
		then return true
		else return false;
	);	

	public canItMove : TypeOfPiece * seq of nat1 * seq of nat1 ==> bool
	canItMove(currentP, pi, pf) ==
	(
		if board(pi) = currentP and board(pf) = <BlankSpace>
		then return moveH(pi, pf) or moveV(pi, pf)
		else return false;
	)
	pre validCoords(pi) and validCoords(pf) and validColour(pi, currentP);
	
	public moveV : seq of nat1 * seq of nat1 ==> bool
	moveV(pi, pf) ==
	(
		if pi(1) = pf(1)
    then
    (
     	return pi(2) = (pf(2) - 1) or pi(2) = (pf(2) + 1);
    )
   	else return false;
	)
	pre validCoords(pi) and validCoords(pf);


	public moveH : seq of nat1 * seq of nat1 ==> bool
	moveH(pi, pf) ==
	(
		 if pi(2) = pf(2)
    then
    (
   		return pi(1) = (pf(1) - 1) or pi(1) = (pf(1) + 1);
    )
   	else return false;
	)
	pre validCoords(pi) and validCoords(pf);

	public movePiece : seq of nat1 * seq of nat1 * TypeOfPiece ==> ()
	movePiece(coord, pfC, color) ==
	(
		board(coord) := <BlankSpace>;
		board(pfC) := color;
	);
	
	public pieceCannotBeCapture : TypeOfPiece * seq of nat1 * seq of nat1 ==> bool
	pieceCannotBeCapture(piece, pi, pf) ==
	(
		if board(pi) = piece and board(pf) = <BlankSpace>
		then
		(
			if pf <> [1,1] or pf <> [8,1] or pf <> [1,8] or pf <> [8,8]
			then return canItMove(piece, pi, pf);
			return false
		)
		else return false;
	)
	pre validCoords(pi) and validCoords(pf) and validColour(pi, piece);

functions
-- TODO Define functiones here

end Board